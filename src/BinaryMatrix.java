
public class BinaryMatrix {
    int[] columns;
    
    public String[] getMaximalLexicographically(String[] matrix, int[] columns, int maxMoveCount)
    {
       this.columns = columns;
    
       if (!verify(matrix))
           return  new String[]{};
       
       String[] res = iter(matrix,maxMoveCount); 
       
       if (res == null)
           return new String[]{};
       else return res;
        
        
    }
    
    
    private boolean verify(String[] matrix) {
        for (int i : columns) {
           if (i > matrix.length)
               return false;
        }
        
        return true;
    }
    
    
    private String[] iter(String[] matrix, int moves) {
     
        //System.out.println("moves: " + moves);
        
        if (moves == 0) {
            if (check(matrix)) 
                return matrix;
            else
                return null;
        }
        
        moves--;
        
        String [][] res = new String[matrix.length][matrix[0].length()]; 
        
        for (int i=0 ;   i < matrix.length; i++) {
              String s = shift(matrix[i]);            
              String[] mat = matrix.clone(); 
              mat[i] = s;
              res[i] = iter(mat,moves);
        }
            
        String[] r = getMax(res,matrix);
        
        return r;
    }
    
    
    
    private String[] getMax(String[][] mat, String[] matrix) {
        //System.out.println("mat is: ");
        //printArr(mat);
        
        
        
        String[] max; 
        max = mat[0];
        for (int i = 1; i < mat.length; i++) {
            if (max == null) 
                max = mat[i];
            else 
                if (mat[i] == null)
                    continue;
                else {
                    if (!isBigger(concat(max),concat(mat[i])))
                        max = mat[i];
                }
        }
        //System.out.println("MAX is: ");
        //printMat(max);
        //System.out.println(">>>>>>>>>>>>>>>>>>>>>>");
        
        
        
        if (check(matrix)) {
            if (max == null)
                return matrix;
            else {
                if (isBigger(concat(max),concat(matrix)))
                    return max;
                else 
                    return matrix;
            }
        }
        else
            return max;
    }
    
    private void printMat(String[] mat) {
           if (mat == null)
               System.out.println("null");
           for (String t : mat)
                System.out.println("[" + t + "]");
        
    }
    
    private void printArr(String[][] mat) {
        for (String[] s : mat) {
            for (String t : s)
                System.out.println("[" + t + "]");
            
            System.out.println("-----");
            
        }
        
    }

    private boolean check(String[] matrix) {
        for (int i=0; i < columns.length ;i++) {
            int max = columns[i];
            int c = 0;
            for (String s : matrix) 
                if (s.charAt(i) == '1')
                    c++;
            if (c != max)
                return false; 
        }
        return true;
    }
    
    private String shift(String shift) {
        
        char s = shift.charAt((shift.length()-1));
        String res =  s +  shift.substring(0, shift.length()-1);
        
        return res;
    }
    
    private String concat(String[] str) {
        String res = "";
        for (String s : str) {
            res += s;
        }
        //System.out.println("concat of : " );
        //printMat(str);
        //
        //System.out.println("res is : " + res );
        return res;
    }
    
    private boolean isBigger(String x, String y) {
        //System.out.println("bigger:" + x + "====" + y);
        
        if (y == null)
            return true;
        if (x == null)
            return true;
        
        for (int i = 0; i < x.length() ; i++) {
           if (x.charAt(i) != y.charAt(i))
               if (x.charAt(i) == '1')
                   return true;
               else
                   return false;
        }
        return true; /// ??
    }
    
    
    
    
    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int[] p1, int p2, boolean hasAnswer, String[] p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        BinaryMatrix obj;
        String[] answer;
        obj = new BinaryMatrix();
        long startTime = System.currentTimeMillis();
        answer = obj.getMaximalLexicographically(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p3.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print("\"" + p3[i] + "\"");
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + answer[i] + "\"");
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p3.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (!answer[i].equals(p3[i])) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;
        
        String[] p0;
        int[] p1;
        int p2;
        String[] p3;
        
        // ----- test 0 -----
        p0 = new String[]{"01000","10000"};
        p1 = new int[]{1,1,0,0,0};
        p2 = 5;
        p3 = new String[]{"10000","01000"};
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 1 -----
        p0 = new String[]{"01000","10000"};
        p1 = new int[]{1,1,0,0,0};
        p2 = 4;
        p3 = new String[]{"01000","10000"};
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 2 -----
        p0 = new String[]{"00100","10000","00010","00001","01000"};
        p1 = new int[]{1,1,1,1,1};
        p2 = 7;
        p3 = new String[]{"10000","01000","00010","00001","00100"};
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 3 -----
        p0 = new String[]{"00011","00010","11000"};
        p1 = new int[]{0,1,2,2,0};
        p2 = 9;
        p3 = new String[]{"01100","00010","00110"};
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 4 -----
        p0 = new String[]{"00000","11111"};
        p1 = new int[]{5,0,0,0,0};
        p2 = 160;
        p3 = new String[]{};
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 5 -----
        p0 = new String[]{"00011"};
        p1 = new int[]{0,1,0,1,0};
        p2 = 160;
        p3 = new String[]{};
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
