import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;



/**
 * 
 *     
An integer polynomial of degree n is a function of the form a0 + a1x1 + a2x2 + ... + anxn, where each ai is a constant integer and x is a variable. An integer root of an integer polynomial is an integer value of x for which the expression equals zero.
You will be given the coefficients of an integer polynomial, and must return all the integer roots in increasing order. Roots must appear only once in the output (see example 1 for clarification).
Since the degree may be quite large, the coefficients are presented indirectly. Use the following pseudo-code to generate the coefficients a[0] to a[n]:
lX = length(X)
lY = length(Y)
for i = 0, 1, ..., n:
  p = i mod lX
  q = (i + Y[i mod lY]) mod lX
  a[i] = X[p]
  X[p] = X[q]
  X[q] = a[i]
The array indices are all 0-based and a mod b is the remainder when a is divided by b.


0)

    
{-4, 2, 2}
{0}
2
Returns: {-2, 1 }
-4 + 2x + 2x2 = 2(x - 1)(x + 2).
1)

    
{1, 2, 0}
{2, 0, 0, 0}
3
Returns: {-1 }
1 + 2x + x^2 + 0x^3 = (x + 1)(x + 1). Note that an may be zero and that roots must appear only once in the output.
2)

    
{1, 4, 4}
{0}
2
Returns: { }

3)

    
{-15, -10, 2, 1}
{0}
3
Returns: {3 }

4)

    
{735134400, 1383, 4121, 18875, 10463, 
 13512, 19603, 28679, 13483, 9509, 1701,
 13383, 24425, 7923, 7978, 21702, 30989,
 20676, 18547, 28130, 10944}
{34,23,6,5,3,5,4,34,37,5,6,21,17,9}
10000
Returns: { }


 * 
 * 
 * @author plsek
 *
 */

public class SolvePolynomial
{
    int[] x;
    int[] y;
    int n;
    
    public int[] integerRoots(int[] X, int[] Y, int n)
    {
       this.x = X;
       this.y = Y;
       this.n = n;
         
       int zero = getCof(0); 
       ArrayList<Integer> del = getDel(zero); 
       System.out.println("del " + del.toString());
       
       
       ArrayList<Integer> res = run(del);
       System.out.println("result " + res.toString());
       Collections.sort(res);
       
       int[] arr  = new int[res.size()];
       int i = 0;
       for (Integer ik : res) {
           arr[i] = ik.intValue();
           i++;
       }
           
      return arr;
        
    }
    
    
    
    public int getCof(int i) {
        
        int lX = x.length;
        int lY = y.length;
        int p = i % lX;
        int q = (i + y[i % lY]) % lX;
        
      //  a[i] = X[p];
       // X[p] = X[q];
        //X[q] = a[i];
        
        //a[i] = x[p]
          //X[p] = X[q]
          //X[q] = a[i]
        
       //lX = length(X)
       // lY = length(Y)
       // for i = 0, 1, ..., n:
       //   p = i mod lX
         //q = (i + Y[i mod lY]) mod lX
          //a[i] = X[p]
          //X[p] = X[q]
          //X[q] = a[i]
        
        
        return x[p];
    }
    
    
    public ArrayList<Integer> run(ArrayList<Integer> del) {
        ArrayList<Integer> res = new ArrayList();
        
        for(Integer i : del) 
            if (comp(i.intValue()))
                res.add(i);
        
        return res;
    }
    
    public boolean comp(int c) {
        int res = getCof(0); 
        
        for (int i = 1; i < n+1; i ++) {
            res += getCof(i) * square(c,i); 
        }
        
        if (res == 0 )
            return true;
        else
            return false;
    }
    
    private int square(int g,int c) {
        int res = g;
        for (int j = 1; j < c ;j++) {
            res = res * g;
        }
        
        return res;
    }
    
    public ArrayList<Integer> getDel(int num) {
        ArrayList<Integer> res = new ArrayList();
        
        /*
        for (int i = 1 ; i < num ; i ++) {
            int k = num / (i * -1);
            if (k == 0)
                continue; // ??
            if (k == -1)
                continue;
            res.add(i);
        }
        */
        
        if (num < 0) {
            num = num * -1;
            res.add(num);
        }
            
        for (int i = 1 ; i < (num / 2) +1 ; i ++) {
            int k = num % i;
            //System.out.println("k:" + k);
            if (k == 0) {
                //System.out.println("add k:" + i);
                res.add((i * -1));
            }
        }
        
        for (int i = 1 ; i < (num / 2) +1 ; i ++) {
            int k = num % i;
            //System.out.println("k:" + k);
            if (k == 0) {
                //System.out.println("add k:" + i);
                res.add(i);
            }
        }
        
        //System.out.println("delitele:"  + res.toString());
        
        if (num > 0) {
            num = num * -1;
            res.add(num);
        }
        
        return res;
    }
    
    
    
    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int[] p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        SolvePolynomial obj;
        int[] answer;
        obj = new SolvePolynomial();
        long startTime = System.currentTimeMillis();
        answer = obj.integerRoots(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p3.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p3[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p3.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p3[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;
        
        int[] p0;
        int[] p1;
        int p2;
        int[] p3;
        
        // ----- test 0 -----
        p0 = new int[]{-4,2,2};
        p1 = new int[]{0};
        p2 = 2;
        p3 = new int[]{-2,1};
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 1 -----
        p0 = new int[]{1,2,0};
        p1 = new int[]{2,0,0,0};
        p2 = 3;
        p3 = new int[]{-1};
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 2 -----
        p0 = new int[]{1,4,4};
        p1 = new int[]{0};
        p2 = 2;
        p3 = new int[]{};
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 3 -----
        p0 = new int[]{-15,-10,2,1};
        p1 = new int[]{0};
        p2 = 3;
        p3 = new int[]{3};
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        // ----- test 4 -----
        p0 = new int[]{735134400,1383,4121,18875,10463,13512,19603,28679,13483,9509,1701,13383,24425,7923,7978,21702,30989,20676,18547,28130,10944};
        p1 = new int[]{34,23,6,5,3,5,4,34,37,5,6,21,17,9};
        p2 = 10000;
        p3 = new int[]{};
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
        
        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!